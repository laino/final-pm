#!/usr/bin/env node
"use strict";

process.on('unhandledRejection', (error) => {
    throw error;
});

const finalPM = require('../');
const cli = require('../lib/cli');

cli.parseArgs();

const args = cli.args;

run().catch(err => {
    const {message = err, stack = err} = err;
    cli.err("CLI", message);
    cli.debug("CLI", stack);
    process.exit(1);
});

async function run() {
    if (args.dry) {
        cli.log("DRY", "[bold]{Commands with side effects will only be simulated.}");
        if (!args.verbose) {
            cli.log("DRY", "[bold yellow]{This mode is probably more useful with [italic]{--verbose}}");
        }
    }

    const lookupPaths = args.config.slice(0);

    if (!lookupPaths.length) {
        lookupPaths.push('.');
    }

    const paths = await Promise.all(lookupPaths.map(finalPM.config.resolveConfig));

    if (paths.includes(null) && args.config.length) {
        cli.err(`No configuration file found at: ${lookupPaths[paths.indexOf(null)]}`);
        process.exit(1);
    }

    const configs = await Promise.all(paths.map(async (path) =>  {
        const timeout = setTimeout(() => {
            cli.warn(`Loading [italic]{${path}} is taking a long time. You should make sure it terminates.`);
        }, 10000);

        try {
            return await finalPM.config.getConfig({
                path: path,
                args: args.set
            });
        } catch (error) {
            if (error.name === 'ConfigError') {
                cli.invalidConfig(error.path, error.message);
            }

            throw error;
        } finally {
            clearTimeout(timeout);
        }
    }));

    const normalizedConfigs = finalPM.config.normalizeArray(configs);

    for (let config of normalizedConfigs) {
        await runWithConfig(config);
    }
}

async function runWithConfig(config) {
    let client = null;
    let cliAction = null;
    let actions = [];
    let upload = false;

    cli.debug("Connection", "Connecting to " + config.socket);

    try {
        client = await connectOrLaunch(config);
    } catch (error) {
        if (error.name === 'ConnectionError') {
            cli.err("Connection", error.message);
            return;
        }
        throw error;
    }

    client.on('publish', (type, data) => {
        if (!type.startsWith('log-')) {
            return;
        }

        cli.appLog(data);
    });

    if (args.action) {
        cliAction = cli.ACTIONS[args.action];
        upload = config.applications.length > 0 && !args['no-upload'] && cliAction.upload;

        if (upload) {
            if (!await uploadConfigurations(client, config)) {
                return close();
            }
        }
    }

    cli.debug("Download", "Retrieving application and process lists");

    cli.debugCommand("info");

    const info = await client.invoke('info');

    if (info.version !== finalPM.version) {
        cli.warn("Version",
            `Daemon version (${info.version || '<2.1.0'}) differs from CLI (${finalPM.version})`);
    } else {
        cli.debug("Version", `Daemon and CLI version: ${info.version}`);
    }

    // Add applications we would've uploaded in a dry run
    if (upload && args.dry) {
        const filtered = filterApplications(config.applications);
        info.applications = info.applications.filter((app) => {
            return !filtered.find((newApp) => app.name === newApp.name);
        }).concat(filtered);
    }

    if (cliAction) {
        actions = cliAction(info, args, client) || [];

        if (typeof actions.then === 'function') {
            actions = await actions;
        }
    }

    if (args.wait) {
        actions.push({
            name: 'wait'
        });
    }

    if (args.kill) {
        actions.push({
            name: 'killDaemon'
        });
    }

    if (actions.length) {
        cli.log("[yellow]{Action}", makeSummary(actions));

        const results = await runAll(client, actions, args.wait);
        const failed = [];

        results.forEach((result, i) => {
            if (!result.success) {
                failed.push(actions[i]);
            }
        });

        if (failed.length) {
            cli.log("[red]{Action}", "[red bold]{Failed:} " + makeSummary(failed));
        } else {
            cli.log("[yellow]{Action}", "[green bold]{Success}");
        }
    }

    if (args.action === 'log' && args.follow) {
        cli.debug("Connection", "Keeping connection open until CTRL-C");
        process.once('SIGINT', close);
    } else {
        close();
    }

    function close() {
        cli.debug("Connection", "Closing Connection");

        client.close();
    }
}

async function runAll(client, actions, showBlocking) {
    let printTimeout;

    async function printBlocking() {
        cli.debugCommand("info");
        const info = await client.invoke('info');
        const starting = info.processes.filter((proc) => proc.generation === 'new');
        const stopping = info.processes.filter((proc) => ['old', 'marked'].includes(proc.generation));

        cli.log('Wait', `Processes: [bold]{${starting.length}} starting, ` +
                        `[bold]{${stopping.length}} stopping`);

        printTimeout = setTimeout(printBlocking, 5000);
    }

    if (showBlocking) {
        printTimeout = setTimeout(printBlocking, 5000);
    }

    let result;

    actions.forEach((action) => {
        cli.debugCommand(action.name, action.args);
    });

    if (args.dry) {
        result = {
            results: Array(actions.length).fill({success: true}),
            success: true
        };
    } else {
        result = await client.invoke('all', actions);
    }

    clearTimeout(printTimeout);

    return result.results;
}

function filterApplications(applications) {
    const appNames = args.select.map(arg => arg.app).filter(_ => _);

    return applications.filter(app => {
        return appNames.includes('all') || appNames.includes(app.name);
    });
}

async function uploadConfigurations(client, config) {
    cli.debug("Upload", `Uploading application configuration: ` +
                  `[bold]{${config.applications.map(_ => _.name).join(' ')}}`);

    const applications = filterApplications(config.applications);

    const results = await Promise.all(applications.map(app => {
        cli.debugCommand('add', [app.name, {force: args.force}]);

        if (args.dry) {
            return Promise.resolve({
                success: true,
                changed: []
            });
        }

        return client.invoke('add', app, {force: args.force});
    }));

    let failed = false;

    const updated = [];
    const added = [];

    results.forEach((result, i) => {
        const app = applications[i];

        if (result.success) {
            if (result.added) {
                added.push(app['name']);
            } else if (result.changed.length) {
                updated.push(`[bold]{${app['name']}}{[yellow]{${result.changed.join(',')}}}`);
            }
            return;
        }

        let reason = "for an unknown reason";

        if (result.reason === 'path') {
            reason = "because its configuration path changed";
        }

        if (result.reason === 'builtin') {
            reason = "because builtins can't be overriden";
        }

        cli.err("Upload", `Daemon rejected configuration for [bold]{${app.name}} ` +
                          `${reason}.\nTry using --force or --no-upload.`);

        failed = true;
    });

    if (added.length) {
        cli.log("Config", `[bold]{${added.join(' ')}} added`);
    }

    if (updated.length) {
        cli.log("Config", `${updated.join(' ')} updated`);
    }

    return !failed;
}

function makeSummary(actions) {
    const counter = {};

    for (const action of actions) {
        counter[action.name] = (counter[action.name] || 0) + 1;
    }

    const plan = [];

    if (counter['delete']) {
        plan.push(`delete ${counter['delete']} applications`);
    }

    ['stop', 'start', 'kill'].forEach((action) => {
        const count = counter[action];
        if (count) {
            plan.push(`${action} ${count} process${count > 1 ? 'es' : ''}`);
        }
    });

    if (counter['wait']) {
        plan.push("wait for completion");
    }

    if (counter['killDaemon']) {
        plan.push("kill daemon");
    }

    return "[bold]{" + cli.capitalize(plan.join('}, then [bold]{')) + '}...';
}

async function connectOrLaunch(config) {
    try {
        return await finalPM.client.connect(config['socket']);
    } catch (error) {
        if ((error.name === 'ConnectionError')) {
            if (config['is-local']) {
                cli.log("Daemon", "Starting Daemon");
                await finalPM.daemon.launch(config);
                return finalPM.client.connect(config['socket']);
            }
        }

        throw error;
    }
}

